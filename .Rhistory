), by = dest
][num_flights >= 10][
order(-mean_arr_delay)
][
airports, on = .(dest = faa)
][
, .(name, mean_arr_delay, median_arr_delay, num_flights)
]
# Display arrival delay summary
kable(arrival_delay_summary, align = 'c')
# Calculate speed in mph
flights[, speed_mph := distance / (air_time / 60)]
# Find the fastest aircraft
fastest_aircraft <- flights[
, .(
avg_speed = mean(speed_mph, na.rm = TRUE),
num_flights = .N
), by = tailnum
][
order(-avg_speed)
][
1
]
# Join with planes dataset to get the model
fastest_model <- fastest_aircraft[
planes, on = "tailnum"
][
, .(model, avg_speed, num_flights)
]
# Display the fastest model
fastest_model
library(methods)
# Rational S4 class
setClass(
"Rational",
slots = list(
numerator = "numeric",
denominator = "numeric"
),
validity = function(object) {
if (object@denominator == 0) {
return("Denominator cannot be zero.")
}
TRUE
}
)
# Constructor function
rational <- function(numerator, denominator) {
new("Rational", numerator = numerator, denominator = denominator)
}
setMethod(
"show",
"Rational",
function(object) {
cat(paste0(object@numerator, "/", object@denominator, "\n"))
}
)
library(Rcpp)
# Define GCD and LCM functions
Rcpp::cppFunction("
int gcd(int a, int b) {
while (b != 0) {
int temp = b;
b = a % b;
a = temp;
}
return a;
}
")
# Simplify method
setGeneric("simplify", function(object) standardGeneric("simplify"))
setMethod(
"simplify",
"Rational",
function(object) {
g <- gcd(object@numerator, object@denominator)
object@numerator <- object@numerator / g
object@denominator <- object@denominator / g
object
}
)
# Quotient method
setGeneric("quotient", function(object, digits = 7) standardGeneric("quotient"))
setMethod(
"quotient",
"Rational",
function(object, digits = 7) {
if (!is.numeric(digits) || digits <= 0) {
stop("Digits must be a positive numeric value.")
}
res <- object@numerator / object@denominator
cat(format(res, digits = digits), "\n")
res
}
)
# Arithmetic methods
setMethod("+", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
numerator <- e1@numerator * e2@denominator + e2@numerator * e1@denominator
denominator <- e1@denominator * e2@denominator
simplify(rational(numerator, denominator))
})
setMethod("-", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
numerator <- e1@numerator * e2@denominator - e2@numerator * e1@denominator
denominator <- e1@denominator * e2@denominator
simplify(rational(numerator, denominator))
})
setMethod("*", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
numerator <- e1@numerator * e2@numerator
denominator <- e1@denominator * e2@denominator
simplify(rational(numerator, denominator))
})
setMethod("/", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
numerator <- e1@numerator * e2@denominator
denominator <- e1@denominator * e2@numerator
simplify(rational(numerator, denominator))
})
# Rational objects
r1 <- rational(3, 4)
r2 <- rational(5, 8)
r3 <- rational(2, 4)
# Testing
r1
r2
r1 + r2
r1 - r2
r1 * r2
r1 / r2
simplify(r1)
quotient(r1)
quotient(r2, digits = 3)
library(dplyr)
art_sales <- read.csv("df_for_ml_improved_new_market.csv")
art_sales <- as.data.frame(art_sales)
sales_price_over_time <- art_sales %>%
group_by(year) %>%
summarise(mean_price = mean(price_usd, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = mean_price)) +
geom_line(color = "blue", linewidth = 1) +
labs(title = "Average Sales Price Over Time", x = "Year", y = "Average Sales Price (USD)") +
theme_minimal()
# Display the plot
sales_price_over_time
art_sales <- art_sales %>%
mutate(genre = case_when(
Genre___Photography == 1 ~ "Photography",
Genre___Print == 1 ~ "Print",
Genre___Sculpture == 1 ~ "Sculpture",
Genre___Painting == 1 ~ "Painting",
Genre___Others == 1 ~ "Others",
TRUE ~ NA_character_
))
print(head(art_sales[[113]],10)) # checking if transformation
# was successful
genre_distribution <- art_sales %>%
group_by(year,genre) %>%
summarise(num_sales = n()) %>%
ggplot(aes(x = year, y = num_sales, fill = genre)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Distribution of Genres Over Time", x = "Year", y = "Number of Sales") +
theme_minimal() +
theme(legend.position = "bottom")
## Display plot
genre_distribution
# Interactive plot
plot <- plot_ly(art_sales, x = ~year, y = ~price_usd, color = ~genre, type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Change in Sales Price Over Time by Genre",
xaxis = list(title = "Yea r"),
yaxis = list(title = "Sales Price (USD)"),
legend = list(title = list(text = "Genre"))
)
plot
library(data.table)
library(nycflights13)
library(knitr)
library(kableExtra)
# Convert data.frames to data.tables
flights <- as.data.table(flights)
airports <- as.data.table(airports)
planes <- as.data.table(planes)
# Summarize departure delays
departure_delay_summary <- flights[
, .(
`Mean Delay` = mean(dep_delay, na.rm = TRUE),
`Median Delay` = median(dep_delay, na.rm = TRUE),
Flights = .N
), by = dest
][Flights >= 10][
order(-`Mean Delay`)
][
airports, on = .(dest = faa)
][
, .(name, `Mean Delay`, `Median Delay`, Flights)
]
# Display departure delay summary
kable(departure_delay_summary, caption = "Departure Delays", digits = 1, align = 'c')
# Summarize arrival delays
arrival_delay_summary <- flights[
, .(
mean_arr_delay = mean(arr_delay, na.rm = TRUE),
median_arr_delay = median(arr_delay, na.rm = TRUE),
num_flights = .N
), by = dest
][num_flights >= 10][
order(-mean_arr_delay)
][
airports, on = .(dest = faa)
][
, .(name, mean_arr_delay, median_arr_delay, num_flights)
]
# Display arrival delay summary
kable(arrival_delay_summary, align = 'c')
# Calculate speed in mph
flights[, speed_mph := distance / (air_time / 60)]
# Find the fastest aircraft
fastest_aircraft <- flights[
, .(
avg_speed = mean(speed_mph, na.rm = TRUE),
num_flights = .N
), by = tailnum
][
order(-avg_speed)
][
1
]
# Join with planes dataset to get the model
fastest_model <- fastest_aircraft[
planes, on = "tailnum"
][
, .(model, avg_speed, num_flights)
]
# Display the fastest model
fastest_model
library(data.table)
library(nycflights13)
library(kableExtra)
library(knitr)
# Convert relevant datasets to data.table
flights_dt <- as.data.table(flights)
airports_dt <- as.data.table(airports)
planes_dt <- as.data.table(planes)
# Departure delay summary
departure_delay_summary <- flights_dt[
!is.na(dep_delay), # Exclude rows with NA dep_delay
.(
`Mean Delay` = mean(dep_delay, na.rm = TRUE),
`Median Delay` = median(dep_delay, na.rm = TRUE),
Flights = .N
), by = dest
][
Flights >= 10
][
order(-`Mean Delay`)
][
airports_dt, on = .(dest = faa), nomatch = 0
][
, .(name = i.name, `Mean Delay`, `Median Delay`, Flights)
]
library(data.table)
library(nycflights13)
library(kableExtra)
library(knitr)
# Convert relevant datasets to data.table
flights_dt <- as.data.table(flights)
airports_dt <- as.data.table(airports)
planes_dt <- as.data.table(planes)
# Departure delay summary
departure_delay_summary <- flights_dt[
!is.na(dep_delay), # Exclude rows with NA dep_delay
.(
`Mean Delay` = mean(dep_delay, na.rm = TRUE),
`Median Delay` = median(dep_delay, na.rm = TRUE),
Flights = .N
), by = dest
][
Flights >= 10
][
order(-`Mean Delay`)
][
airports_dt, on = .(dest = faa), nomatch = 0
][
, .(name, `Mean Delay`, `Median Delay`, Flights) # Use the column directly after the join
]
if (nrow(departure_delay_summary) == 0) {
departure_delay_summary <- data.table(name = NA, `Mean Delay` = NA, `Median Delay` = NA, Flights = NA)
}
kable(departure_delay_summary, caption = "Departure Delays", digits = 1, align = 'c')
# Arrival delay summary
arrival_delay_summary <- flights_dt[
!is.na(arr_delay), # Exclude rows with NA arr_delay
.(
mean_arr_delay = mean(arr_delay, na.rm = TRUE),
median_arr_delay = median(arr_delay, na.rm = TRUE),
num_flights = .N
), by = dest
][
num_flights >= 10
][
order(-mean_arr_delay)
][
airports_dt, on = .(dest = faa), nomatch = 0
][
, .(name, mean_arr_delay, median_arr_delay, num_flights) # Use the column directly after the join
]
if (nrow(arrival_delay_summary) == 0) {
arrival_delay_summary <- data.table(name = NA, mean_arr_delay = NA, median_arr_delay = NA, num_flights = NA)
}
kable(arrival_delay_summary, align = 'c')
# Calculate speed
flights_dt[, speed_mph := distance / (air_time / 60)]
flights_dt <- flights_dt[!is.na(speed_mph)] # Exclude rows with NA speeds
# Find the aircraft with the fastest average speed
fastest_aircraft <- flights_dt[
, .(
avg_speed = mean(speed_mph, na.rm = TRUE),
num_flights = .N
), by = tailnum
][
order(-avg_speed)
][
1
]
if (nrow(fastest_aircraft) == 0) {
fastest_model <- data.table(model = NA, avg_speed = NA, num_flights = NA)
} else {
# Join with planes to get the model
fastest_model <- fastest_aircraft[
planes_dt, on = "tailnum", nomatch = 0
][
, .(model, avg_speed, num_flights)
]
}
# Display the fastest model
fastest_model
# install.packages("nycflights13")
library(tidyverse)
library(nycflights13)
library(kableExtra)
# install.packages("knitr")
library(knitr)
flights_data <- head(flights)
departure_delay_summary <- flights %>%
group_by(dest) %>%
summarise("Mean Delay" = mean(dep_delay, na.rm = TRUE),
"Median Delay" = median(dep_delay, na.rm = TRUE),
"Flights" = n()) %>%
filter("Flights" >= 10) %>%
arrange(desc("Mean Delay")) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(name, "Mean Delay", "Median Delay", "Flights")
kable(departure_delay_summary, caption = "Departure Delays", digits = 1, align = 'c')
arrival_delay_summary <- flights %>%
group_by(dest) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = TRUE),
median_arr_delay = median(arr_delay, na.rm = TRUE),
num_flights = n()) %>%
filter(num_flights >= 10) %>%
arrange(desc(mean_arr_delay)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(name, mean_arr_delay, median_arr_delay, num_flights)
## Display the tibble
kable(arrival_delay_summary,align='c')
flights_speed <- flights %>%
mutate(speed_mph = distance / (air_time / 60))
## Find the aircraft with the fastest average speed
fastest_aircraft <- flights_speed %>%
group_by(tailnum) %>%
summarise(avg_speed = mean(speed_mph, na.rm = TRUE), num_flights = n()) %>%
arrange(desc(avg_speed)) %>%
slice(1)
## Join with the planes dataset to get the model
fastest_model <- fastest_aircraft %>%
left_join(planes, by = "tailnum") %>%
select(model, avg_speed, num_flights)
## Display the fastest model
fastest_model
nnmaps <- read.csv("chicago-nmmaps.csv")
nnmaps$date <- as.Date(nnmaps$date)
par(mar = c(5, 4, 4, 2) + 0.1)
# Create the scatterplot
plot(nnmaps$date, nnmaps$o3,
col = "darkblue",
pch = 20,
cex = 0.7,
main = "Ozone Levels by Season",
xlab = "Date",
ylab = "Ozone (O3) Levels")
par(mar = c(5,4,4,6)+0.1)  # Increased right margin for the legend
season_colors <- c("Winter" = "blue", "Spring" = "green", "Summer" = "orange", "Autumn" = "brown")
nnmaps$season <- factor(nnmaps$season,
levels = c("Winter", "Spring", "Summer", "Autumn"))
with(nnmaps,
plot(o3 ~ date, col = season_colors[season], pch = 20, cex = 0.7,
main = "Ozone Levels by Season",
xlab = "Date",
ylab = "Ozone (O3) Levels"))
# Add the legend positioned outside the plot area
with(nnmaps,
legend(x = max(nnmaps$date) + 3,
y = max(nnmaps$o3),
legend = levels(nnmaps$season),
col = season_colors,
pch = 19,
bty = "n",
title = "Season",
xpd = TRUE))
suppressWarnings(nnmaps_month <-
aggregate(nnmaps, by = list(nnmaps$month_numeric,
nnmaps$year),
FUN = mean, na.rm = TRUE))
nnmaps_month <- nnmaps_month[order(nnmaps_month$year,
nnmaps_month$month_numeric), ]
with(nnmaps_month,
plot(o3 ~ date, type = "l"))
get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {
if (is.character(month)) {
month <- match(tolower(month), tolower(month.abb))
}
if (is.na(month) || month < 1 || month > 12) {
warning("Invalid month input. Please provide a valid month (1-12, full month name, or 3-letter abbreviation).")
return(NULL)  ## prevent quarto rendering failure
}
if (!"month_numeric" %in% colnames(data) || !"year" %in% colnames(data)) {
warning("Data does not contain required columns: 'month_numeric' and 'year'.")
return(NULL)
}
temp_data <- data %>%
filter(month_numeric == !!month, year == !!year)
if (nrow(temp_data) == 0) {
message(paste("No data found for month:", as.character(month), "and year:", as.character(year)))
warning("No data available for the provided month and year.")
return(NULL)
}
## average temperature
avg_temp <- temp_data %>%
summarise(avg_temp = average_fn(temp, na.rm = TRUE)) %>%
pull(avg_temp)
## Convert to Celsius
if (celsius) {
avg_temp <- (avg_temp - 32) * 5 / 9
}
return(avg_temp)
}
head(nnmaps)
unique(nnmaps$month_numeric)
unique(nnmaps$year)
filtered_data <- nnmaps %>%
filter(month_numeric == 1, year == 1997)
kable(filtered_data,digits = 1, align = 'c')
# April 1999 temperature in Fahrenheit
get_temp("Apr", 1999, data = nnmaps)
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
get_temp(10, 1998, data = nnmaps, average_fn = median)
get_temp(13, 1998, data = nnmaps)
get_temp(2, 2005, data = nnmaps, celsius = TRUE, average_fn = function(x) {
x <- sort(x)
return(mean(x[2:(length(x) - 1)]))
})
get_temp(2, 2005, data = nnmaps)
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
average_fn = function(x) {
x %>% sort -> x
x[2:(length(x) - 1)] %>% mean %>% return
})
art_sales <- read.csv("df_for_ml_improved_new_market.csv")
nrow(art_sales)
ncol(art_sales)
dim(art_sales)
typeof(art_sales)
art_sales <- as.data.frame(art_sales)
# explicit conv to dataframe to avoid errors later
colnames(art_sales)
sales_price_over_time <- art_sales %>%
group_by(year) %>%
summarise(mean_price = mean(price_usd, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = mean_price)) +
geom_line(color = "blue", linewidth = 1) +
labs(title = "Average Sales Price Over Time", x = "Year", y = "Average Sales Price (USD)") +
theme_minimal()
# Display the plot
sales_price_over_time
art_sales <- art_sales %>%
mutate(genre = case_when(
Genre___Photography == 1 ~ "Photography",
Genre___Print == 1 ~ "Print",
Genre___Sculpture == 1 ~ "Sculpture",
Genre___Painting == 1 ~ "Painting",
Genre___Others == 1 ~ "Others",
TRUE ~ NA_character_
))
print(head(art_sales[[113]],10)) #check
genre_distribution <- art_sales %>%
group_by(year,genre) %>%
summarise(num_sales = n()) %>%
ggplot(aes(x = year, y = num_sales, fill = genre)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Distribution of Genres Over Time", x = "Year", y = "Number of Sales") +
theme_minimal() +
theme(legend.position = "bottom")
## Display plot
genre_distribution
genre_price_effect <- art_sales %>%
group_by(year,genre) %>%
summarise(mean_price = mean(price_usd, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = mean_price, color = genre)) +
geom_line(size = 1) +
labs(title = "Fluctuation in Sales Price of Each Genre Over Time",
x = "Year",
y = "Average Sales Price (USD)") +
theme_minimal()
## Display plot
genre_price_effect
