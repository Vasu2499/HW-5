---
title: "STATS 506 : HW-5"
author: "Vasudha Rohatgi"
format: 
  pdf:
    pdf-engine: pdflatex
    keep-tex: true
    documentclass: article
    fontsize: 12pt
    header-includes:
      - \usepackage{setspace}  
      - \setstretch{1.0}        
      - \usepackage{geometry}   
      - \geometry{margin=0.6in}   
      - \usepackage{parskip}     
      - \setlength{\parskip}{0.3em}  
      - \setlength{\parindent}{0.1em}
      - \usepackage{listings}
      - \lstset{breaklines=true}  
      - \usepackage{graphicx}    
      - \usepackage{longtable}    
      - \usepackage{caption}      
      - \captionsetup{width=\textwidth}
  html:
    prefer-html: true  
editor: visual
---

#### Code hosted at <https://github.com/Vasu2499/HW-5>

## Problem - 1

***OOP Programming***

### 1 - `Constructor` and `Validator` (with rationality check)Â 

```{r}

library(methods)

# Rational S4 class
setClass(
  "Rational",
  slots = list(
    numerator = "numeric",
    denominator = "numeric"
  ),
  validity = function(object) {
    if (object@denominator == 0) {
      return("Denominator cannot be zero.")
    }
    TRUE
  }
)

# Constructor function
rational <- function(numerator, denominator) {
  new("Rational", numerator = numerator, denominator = denominator)
}
```

### 3 - `Show` Method

```{r}

setMethod(
  "show",
  "Rational",
  function(object) {
    cat(paste0(object@numerator, "/", object@denominator, "\n"))
  }
)

```

### 4 - `Simplify` Method

```{r}

library(Rcpp)

# Define GCD and LCM functions
Rcpp::cppFunction("
int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}
")

# Simplify method
setGeneric("simplify", function(object) standardGeneric("simplify"))

setMethod(
  "simplify",
  "Rational",
  function(object) {
    g <- gcd(object@numerator, object@denominator)
    object@numerator <- object@numerator / g
    object@denominator <- object@denominator / g
    object
  }
)

```

### 5 - `Quotient` Method

```{r}
# Quotient method
setGeneric("quotient", function(object, digits = 7) standardGeneric("quotient"))

setMethod(
  "quotient",
  "Rational",
  function(object, digits = 7) {
    if (!is.numeric(digits) || digits <= 0) {
      stop("Digits must be a positive numeric value.")
    }
    res <- object@numerator / object@denominator
    cat(format(res, digits = digits), "\n")
    res
  }
)

# Arithmetic methods
setMethod("+", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
  numerator <- e1@numerator * e2@denominator + e2@numerator * e1@denominator
  denominator <- e1@denominator * e2@denominator
  simplify(rational(numerator, denominator))
})

setMethod("-", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
  numerator <- e1@numerator * e2@denominator - e2@numerator * e1@denominator
  denominator <- e1@denominator * e2@denominator
  simplify(rational(numerator, denominator))
})

setMethod("*", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
  numerator <- e1@numerator * e2@numerator
  denominator <- e1@denominator * e2@denominator
  simplify(rational(numerator, denominator))
})

setMethod("/", signature(e1 = "Rational", e2 = "Rational"), function(e1, e2) {
  numerator <- e1@numerator * e2@denominator
  denominator <- e1@denominator * e2@numerator
  simplify(rational(numerator, denominator))
})

```

### 6 - Testing the Methods & Creating Rational Objects

```{r}
# Rational objects
r1 <- rational(3, 4)
r2 <- rational(5, 8)
r3 <- rational(2, 4)

# Testing
r1
r2
r1 + r2
r1 - r2
r1 * r2
r1 / r2
simplify(r1)
quotient(r1)
quotient(r2, digits = 3)

```

------------------------------------------------------------------------

## Problem - 2

### 1 - Regenerating plots from the previous homework

**Here, I'm first re-framing and cleaning the art data set using my code from the last homework**

```{r}
library(dplyr)
library(ggplot2)
library(plotly)

art_sales <- read.csv("df_for_ml_improved_new_market.csv") 
art_sales <- as.data.frame(art_sales) 
```

```{r}
sales_price_over_time <- art_sales %>%
  group_by(year) %>%
  summarise(mean_price = mean(price_usd, na.rm = TRUE)) %>%
  ggplot(aes(x = year, y = mean_price)) +
  geom_line(color = "blue", linewidth = 1) +
  labs(title = "Average Sales Price Over Time", x = "Year", y = "Average Sales Price (USD)") +
  theme_minimal()

# Display the plot
sales_price_over_time
```

**Redefining Column Data**

```{r}

art_sales <- art_sales %>%
  mutate(genre = case_when(
    Genre___Photography == 1 ~ "Photography",
    Genre___Print == 1 ~ "Print",
    Genre___Sculpture == 1 ~ "Sculpture",
    Genre___Painting == 1 ~ "Painting",
    Genre___Others == 1 ~ "Others",
    TRUE ~ NA_character_  
  ))
print(head(art_sales[[113]],10)) # checking if transformation 
                                # was successful 
```

**Fluctuation in the selling price of each genre over time**

```{r}
genre_distribution <- art_sales %>%
  group_by(year,genre) %>%
  summarise(num_sales = n()) %>%
  ggplot(aes(x = year, y = num_sales, fill = genre)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Distribution of Genres Over Time", x = "Year", y = "Number of Sales") +
  theme_minimal() +
  theme(legend.position = "bottom")

## Display plot
genre_distribution
```

### 2 - Interactive plot with `plotly()`

```{r}
library(htmlwidgets)
  
plot <- plot_ly(art_sales, x = ~year, y = ~price_usd, color = ~genre, type = 'scatter', mode = 'lines+markers') %>%
  layout(
    title = "Change in Sales Price Over Time by Genre",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Sales Price (USD)"),
    legend = list(title = list(text = "Genre"))
  )

# Save the plot as an HTML file
saveWidget(plot, "interactive_plot.html")


```

**You can view the interactive plot by clicking [here](./interactive_plot.html).**

Or, paste this network-link into the web-browser <file:///C:/Users/vasud/OneDrive/Desktop/U-M%20-%20ALL/STATS%20506/HW-5/interactive_plot.html>

\

------------------------------------------------------------------------

## Problem - 3

### Solution to HW-4 Problem-1 using data.table

```{r}
library(data.table)
library(nycflights13)
library(kableExtra)
library(knitr)

# Convert relevant datasets to data.table
flights_dt <- as.data.table(flights)
airports_dt <- as.data.table(airports)
planes_dt <- as.data.table(planes)

# Departure delay summary
departure_delay_summary <- flights_dt[
  !is.na(dep_delay), # Exclude rows with NA dep_delay
  .(
    `Mean Delay` = mean(dep_delay, na.rm = TRUE),
    `Median Delay` = median(dep_delay, na.rm = TRUE),
    Flights = .N
  ), by = dest
][
  Flights >= 10
][
  order(-`Mean Delay`)
][
  airports_dt, on = .(dest = faa), nomatch = 0
][
  , .(name, `Mean Delay`, `Median Delay`, Flights) # Use the column directly after the join
]

if (nrow(departure_delay_summary) == 0) {
  departure_delay_summary <- data.table(name = NA, `Mean Delay` = NA, `Median Delay` = NA, Flights = NA)
}

kable(departure_delay_summary, caption = "Departure Delays", digits = 1, align = 'c')

# Arrival delay summary
arrival_delay_summary <- flights_dt[
  !is.na(arr_delay), # Exclude rows with NA arr_delay
  .(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE),
    median_arr_delay = median(arr_delay, na.rm = TRUE),
    num_flights = .N
  ), by = dest
][
  num_flights >= 10
][
  order(-mean_arr_delay)
][
  airports_dt, on = .(dest = faa), nomatch = 0
][
  , .(name, mean_arr_delay, median_arr_delay, num_flights) # Use the column directly after the join
]

if (nrow(arrival_delay_summary) == 0) {
  arrival_delay_summary <- data.table(name = NA, mean_arr_delay = NA, median_arr_delay = NA, num_flights = NA)
}

kable(arrival_delay_summary, align = 'c')

# Calculate speed
flights_dt[, speed_mph := distance / (air_time / 60)]
flights_dt <- flights_dt[!is.na(speed_mph)] # Exclude rows with NA speeds

# Find the aircraft with the fastest average speed
fastest_aircraft <- flights_dt[
  , .(
    avg_speed = mean(speed_mph, na.rm = TRUE),
    num_flights = .N
  ), by = tailnum
][
  order(-avg_speed)
][
  1
]

if (nrow(fastest_aircraft) == 0) {
  fastest_model <- data.table(model = NA, avg_speed = NA, num_flights = NA)
} else {
  # Join with planes to get the model
  fastest_model <- fastest_aircraft[
    planes_dt, on = "tailnum", nomatch = 0
  ][
    , .(model, avg_speed, num_flights)
  ]
}

# Display the fastest model
fastest_model

```

[**The computed results can be compared back to HW-4. They are precisely the same.**]{.underline}
