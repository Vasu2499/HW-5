"0","# Quotient method"
"0","setGeneric(""quotient"", function(object, digits = 7) standardGeneric(""quotient""))"
"1","[1]"
"1"," ""quotient"""
"1","
"
"0","setMethod("
"0","  ""quotient"","
"0","  ""Rational"","
"0","  function(object, digits = 7) {"
"0","    if (!is.numeric(digits) || digits <= 0) {"
"0","      stop(""Digits must be a positive numeric value."")"
"0","    }"
"0","    res <- object@numerator / object@denominator"
"0","    cat(format(res, digits = digits), ""\n"")"
"0","    res"
"0","  }"
"0",")"
"0",""
"0","# Arithmetic methods"
"0","setMethod(""+"", signature(e1 = ""Rational"", e2 = ""Rational""), function(e1, e2) {"
"0","  numerator <- e1@numerator * e2@denominator + e2@numerator * e1@denominator"
"0","  denominator <- e1@denominator * e2@denominator"
"0","  simplify(rational(numerator, denominator))"
"0","})"
"0",""
"0","setMethod(""-"", signature(e1 = ""Rational"", e2 = ""Rational""), function(e1, e2) {"
"0","  numerator <- e1@numerator * e2@denominator - e2@numerator * e1@denominator"
"0","  denominator <- e1@denominator * e2@denominator"
"0","  simplify(rational(numerator, denominator))"
"0","})"
"0",""
"0","setMethod(""*"", signature(e1 = ""Rational"", e2 = ""Rational""), function(e1, e2) {"
"0","  numerator <- e1@numerator * e2@numerator"
"0","  denominator <- e1@denominator * e2@denominator"
"0","  simplify(rational(numerator, denominator))"
"0","})"
"0",""
"0","setMethod(""/"", signature(e1 = ""Rational"", e2 = ""Rational""), function(e1, e2) {"
"0","  numerator <- e1@numerator * e2@denominator"
"0","  denominator <- e1@denominator * e2@numerator"
"0","  simplify(rational(numerator, denominator))"
"0","})"
"0",""
