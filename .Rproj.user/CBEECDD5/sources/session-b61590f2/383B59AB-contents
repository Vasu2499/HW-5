---
title: "HW-4"
format: 
  pdf:
    pdf-engine: pdflatex
    keep-tex: true
    documentclass: article
    fontsize: 11pt
    header-includes:
      - \usepackage{setspace}  
      - \setstretch{1.2}        
      - \usepackage{geometry}   
      - \geometry{margin=0.6in}   
      - \usepackage{parskip}     
      - \setlength{\parskip}{0.5em}  
      - \setlength{\parindent}{0.1em}
      - \usepackage{listings}
      - \lstset{breaklines=true}  
      - \usepackage{graphicx}    
      - \usepackage{longtable}    
      - \usepackage{caption}      
      - \captionsetup{width=\textwidth} # Set caption width to text width
      
editor: visual
---

## STATS 506

## Vasudha Rohatgi

| Please find the full code (.qmd file) <https://github.com/Vasu2499/HW-4/blob/master/HW-4.qmd>
| .qmd file can be run directly on R-Studio to reproduce outputs

## Problem - 1 - Tidyverse

This problem asks us to use the **tidyverse**, specifically **dplyr**, to analyze flight delays using the `nycflights13` dataset.

```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE}
# install.packages("nycflights13")
library(tidyverse)
library(nycflights13)
library(kableExtra)
# install.packages("knitr")
library(knitr)
```

```{r}
flights_data <- head(flights)
```

```{r}
departure_delay_summary <- flights %>%
  group_by(dest) %>%
  summarise("Mean Delay" = mean(dep_delay, na.rm = TRUE),
            "Median Delay" = median(dep_delay, na.rm = TRUE),
            "Flights" = n()) %>%
  filter("Flights" >= 10) %>% 
  arrange(desc("Mean Delay")) %>%  
  left_join(airports, by = c("dest" = "faa")) %>%
  select(name, "Mean Delay", "Median Delay", "Flights")

kable(departure_delay_summary, caption = "Departure Delays", digits = 1, align = 'c')

```

```{r}
arrival_delay_summary <- flights %>%
  group_by(dest) %>%
  summarise(mean_arr_delay = mean(arr_delay, na.rm = TRUE),
            median_arr_delay = median(arr_delay, na.rm = TRUE),
            num_flights = n()) %>%
  filter(num_flights >= 10) %>%
  arrange(desc(mean_arr_delay)) %>%
  left_join(airports, by = c("dest" = "faa")) %>%
  select(name, mean_arr_delay, median_arr_delay, num_flights)

## Display the tibble
kable(arrival_delay_summary,align='c') 
```

```{r}
flights_speed <- flights %>%
  mutate(speed_mph = distance / (air_time / 60))  

## Find the aircraft with the fastest average speed

fastest_aircraft <- flights_speed %>%
  group_by(tailnum) %>%
  summarise(avg_speed = mean(speed_mph, na.rm = TRUE), num_flights = n()) %>%
  arrange(desc(avg_speed)) %>%
  slice(1)

## Join with the planes dataset to get the model

fastest_model <- fastest_aircraft %>%
  left_join(planes, by = "tailnum") %>%
  select(model, avg_speed, num_flights)

## Display the fastest model

fastest_model
```

------------------------------------------------------------------------

## **Problem 2 - `get_temp()`**

#### First I have re-written the code from the visualization lectures to plot the data

```{r}
nnmaps <- read.csv("chicago-nmmaps.csv")
nnmaps$date <- as.Date(nnmaps$date)
par(mar = c(5, 4, 4, 2) + 0.1)

# Create the scatterplot
plot(nnmaps$date, nnmaps$o3, 
     col = "darkblue",  
     pch = 20,             
     cex = 0.7,            
     main = "Ozone Levels by Season", 
     xlab = "Date", 
     ylab = "Ozone (O3) Levels")

```

```{r}

par(mar = c(5,4,4,6)+0.1)  # Increased right margin for the legend

season_colors <- c("Winter" = "blue", "Spring" = "green", "Summer" = "orange", "Autumn" = "brown")


nnmaps$season <- factor(nnmaps$season,
                        levels = c("Winter", "Spring", "Summer", "Autumn"))


with(nnmaps,
     plot(o3 ~ date, col = season_colors[season], pch = 20, cex = 0.7, 
          main = "Ozone Levels by Season", 
          xlab = "Date", 
          ylab = "Ozone (O3) Levels"))

# Add the legend positioned outside the plot area
with(nnmaps,
     legend(x = max(nnmaps$date) + 3,    
            y = max(nnmaps$o3),          
            legend = levels(nnmaps$season),  
            col = season_colors,            
            pch = 19,
            bty = "n",                      
            title = "Season",
            xpd = TRUE))              

```

```{r}
suppressWarnings(nnmaps_month <-
                   aggregate(nnmaps, by = list(nnmaps$month_numeric,
                                               nnmaps$year),
                             FUN = mean, na.rm = TRUE))
nnmaps_month <- nnmaps_month[order(nnmaps_month$year,
                                   nnmaps_month$month_numeric), ]
with(nnmaps_month,
     plot(o3 ~ date, type = "l"))
```

#### [Analysis]{.underline}

**I used the `non-standard evaluation expression (!!)` in dplyr instead of calling the nnmaps column by the `subsetting operator ($)`** as I read that tidy evaluation is more robust.

```{r}
get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {
 
  if (is.character(month)) {
    month <- match(tolower(month), tolower(month.abb))
  }
  
  if (is.na(month) || month < 1 || month > 12) {
    warning("Invalid month input. Please provide a valid month (1-12, full month name, or 3-letter abbreviation).")
    return(NULL)  ## prevent quarto rendering failure
  }
  
  if (!"month_numeric" %in% colnames(data) || !"year" %in% colnames(data)) {
    warning("Data does not contain required columns: 'month_numeric' and 'year'.")
    return(NULL)  
  }

  
  temp_data <- data %>%
    filter(month_numeric == !!month, year == !!year)
  
  
  if (nrow(temp_data) == 0) {
    message(paste("No data found for month:", as.character(month), "and year:", as.character(year)))
    warning("No data available for the provided month and year.")
    return(NULL)  
  }

  ## average temperature
  avg_temp <- temp_data %>%
    summarise(avg_temp = average_fn(temp, na.rm = TRUE)) %>%
    pull(avg_temp)
  
  ## Convert to Celsius 
  if (celsius) {
    avg_temp <- (avg_temp - 32) * 5 / 9
  }
  
  return(avg_temp)
}

```

```{r}
head(nnmaps)
unique(nnmaps$month_numeric)
unique(nnmaps$year)
filtered_data <- nnmaps %>%
  filter(month_numeric == 1, year == 1997)

kable(filtered_data,digits = 1, align = 'c')
```

#### Testing the function

```{r}
# April 1999 temperature in Fahrenheit 
get_temp("Apr", 1999, data = nnmaps)
```

```{r}
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
```

```{r}
get_temp(10, 1998, data = nnmaps, average_fn = median)
```

```{r}
get_temp(13, 1998, data = nnmaps)
```

```{r}
get_temp(2, 2005, data = nnmaps, celsius = TRUE, average_fn = function(x) {
  x <- sort(x)
  return(mean(x[2:(length(x) - 1)]))  
})
```

```{r}
get_temp(2, 2005, data = nnmaps)
```

```{r}
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```

------------------------------------------------------------------------

## **Problem 3 - Visualization**

```{r}
art_sales <- read.csv("df_for_ml_improved_new_market.csv")
```

```{r}
nrow(art_sales)
ncol(art_sales)
dim(art_sales)
typeof(art_sales)
```

```{r}
art_sales <- as.data.frame(art_sales) 
# explicit conv to dataframe to avoid errors later 
```

```{r}
colnames(art_sales)
```

```{r}
sales_price_over_time <- art_sales %>%
  group_by(year) %>%
  summarise(mean_price = mean(price_usd, na.rm = TRUE)) %>%
  ggplot(aes(x = year, y = mean_price)) +
  geom_line(color = "blue", linewidth = 1) +
  labs(title = "Average Sales Price Over Time", x = "Year", y = "Average Sales Price (USD)") +
  theme_minimal()

# Display the plot
sales_price_over_time
```

#### Here, I am combining the 5 binary value columns for genre into one column so that we can plot the data and differentiate on the basis of genre. This is easier than constructing a check for each column.

```{r}
art_sales <- art_sales %>%
  mutate(genre = case_when(
    Genre___Photography == 1 ~ "Photography",
    Genre___Print == 1 ~ "Print",
    Genre___Sculpture == 1 ~ "Sculpture",
    Genre___Painting == 1 ~ "Painting",
    Genre___Others == 1 ~ "Others",
    TRUE ~ NA_character_  
  ))
print(head(art_sales[[113]],10)) #check
```

#### Sales distribution grouped by genre

```{r}
genre_distribution <- art_sales %>%
  group_by(year,genre) %>%
  summarise(num_sales = n()) %>%
  ggplot(aes(x = year, y = num_sales, fill = genre)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Distribution of Genres Over Time", x = "Year", y = "Number of Sales") +
  theme_minimal() +
  theme(legend.position = "bottom")

## Display plot
genre_distribution
```

#### Fluctuation in the selling price of each genre over time

```{r}

genre_price_effect <- art_sales %>%
  group_by(year,genre) %>%
  summarise(mean_price = mean(price_usd, na.rm = TRUE)) %>%
  ggplot(aes(x = year, y = mean_price, color = genre)) +
  geom_line(size = 1) +
  labs(title = "Fluctuation in Sales Price of Each Genre Over Time", 
       x = "Year", 
       y = "Average Sales Price (USD)") + 
  theme_minimal()

## Display plot
genre_price_effect

```
